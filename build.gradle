ext.kotlin_version = '1.3.50'
ext.annotations_version = '16.0.3'
ext.coroutines_version = '1.3.1'

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://repo.spongepowered.org/maven' }
        maven { url 'https://files.minecraftforge.net/maven' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3.4'
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.spongepowered.mixin'


version = 'HW' // Jar output Version
group = 'org.hockey.hockeyware.client'
archivesBaseName = 'HockeyWare' // Jar output name

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
}

// Run Configurations
minecraft {
    replace '%version%', project.version
    version = '1.12.2-14.23.5.2847'
    runDir = 'run'
    mappings = 'stable_39'
    coreMod = 'org.hockey.hockeyware.client.mixin.ForgeMixinLoader'
    makeObfSourceJar = false
}

// Build Configurations
jar {
    manifest {
        attributes(
                'MixinConfigs': 'mixins.hockey.json',
                'tweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': 0,
                'FMLCorePluginContainsFMLMod': 'true',
                'FMLCorePlugin': 'org.hockey.hockeyware.client.mixin.ForgeMixinLoader',
                'ForceLoadAsMod': 'false', // On runClient: 'false'; On build: 'true'
                'FMLAT': 'hw_at.cfg'
        )
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spongepowered.org/maven' }
}

dependencies {
    compile("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }

    annotationProcessor("org.spongepowered:mixin:0.8.2:processor") {
        exclude module: 'gson'
    }
    compile 'club.minnced:java-discord-rpc:2.0.2'
    compile group: "com.googlecode.json-simple", name: "json-simple", version: "1.1.1"
    compile 'org.java-websocket:Java-WebSocket:1.5.3'
    compile 'org.slf4j:slf4j-log4j12:1.7.25'
    compile 'org.slf4j:slf4j-api:2.0.3'
    compile 'com.formdev:flatlaf:2.6'


    compile group: "org.jetbrains.kotlin", name: "kotlin-stdlib", version: "$kotlin_version"
    compile group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk7", version: "$kotlin_version"
    compile group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: "$kotlin_version"
    compile group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: "$kotlin_version"
    compile group: "org.jetbrains", name: "annotations", version: "$annotations_version"
    compile group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-core", version: "$coroutines_version"
    compile group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-jdk8", version: "$coroutines_version"
}

reobf {
    shadowJar {
        mappingType = 'SEARGE'
        classpath = sourceSets.main.compileClasspath
    }
}

mixin {
    defaultObfuscationEnv searge
    sourceSets.main {
        ext.refMap = 'mixins.hockey.refmap.json'
    }
}

shadowJar {
    dependencies {
        include dependency('org.spongepowered:mixin')
        include dependency('club.minnced:java-discord-rpc')
        include(dependency('com.googlecode.json-simple:json-simple:1.1.1'))
        include(dependency('org.java-websocket:Java-WebSocket:1.5.3'))
        include(dependency('org.slf4j:slf4j-log4j12:1.7.25'))
        include(dependency('org.slf4j:slf4j-api:2.0.3'))
        include(dependency("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"))
        include(dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"))
        include(dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"))
        include(dependency("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"))
        include(dependency("org.jetbrains:annotations:$annotations_version"))
        include(dependency("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"))
        include(dependency("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutines_version"))
    }

    exclude 'dummyThing', 'LICENSE.txt', 'org/**/*.html', 'META-INF/maven/**'
    classifier = ''
}

processResources {
    inputs.property 'version', project.version
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    rename '(.+_at.cfg)', 'META-INF/$1'
}

task privateJar(type: Jar, dependsOn: jar) {
    from(zipTree(shadowJar.archivePath)) {
        exclude 'org/hockey/hockeyware/loader/'
    }
    manifest {
        attributes(
                'MixinConfigs': 'mixins.hockey.json',
                'tweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': 0,
                'FMLCorePluginContainsFMLMod': 'true',
                'FMLCorePlugin': 'org.hockey.hockeyware.client.mixin.ForgeMixinLoader',
                'ForceLoadAsMod': 'true',
                'FMLAT': 'hw_at.cfg'
        )
    }
    baseName = ''
    version = ''
    classifier = 'hockeyware-privateJar'
}

task publicJar(type: Jar, dependsOn: jar) {
    from(zipTree(shadowJar.archivePath)) {
        include "org/hockey/hockeyware/client/"
        include 'mixins.hockey.json'
        include 'mixins.hockey.refmap.json'
        include 'assets/'
    }
    baseName = ''
    version = ''
    classifier = 'hockeyware-publicJar'
}

task loaderJar(type: Jar, dependsOn: shadowJar) {
    from(zipTree(shadowJar.archivePath)) {
        exclude 'org/hockey/hockeyware/client/'
        exclude 'mixins.hockey.json'
        exclude 'mixins.hockey.refmap.json'
        exclude 'assets/'
    }
    manifest {
        attributes(
//                'MixinConfigs': 'mixins.hockey.json',
                'tweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': 0,
                'FMLCorePluginContainsFMLMod': 'true',
                'FMLCorePlugin': 'org.hockey.hockeyware.loader.LoaderCoreMod',
                'ForceLoadAsMod': 'true',
                'FMLAT': 'hw_at.cfg'
        )
    }
    baseName = ''
    version = ''
    classifier = 'hockeyware-loader'
}

build.dependsOn(privateJar, publicJar, loaderJar)


compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}